# Generated by Django 5.1.1 on 2024-10-02 13:23

import timescale.db.models.fields
from django.db import migrations, models
from django.db.models import Min
from django.db.transaction import atomic


def remove_duplicates(apps, schema_editor):
    print("")
    print("Removing duplicates from Location and Visit models")
    print("")
    Location = apps.get_model("wayfinder", "Location")
    Visit = apps.get_model("wayfinder", "Visit")

    for Model in [Location, Visit]:
        print(f"Processing {Model.__name__}")

        # Find duplicates
        duplicates = (
            Model.objects.values("time")
            .annotate(min_id=Min("id"), count=models.Count("id"))
            .filter(count__gt=1)
        )

        print(f"Found {duplicates.count()} duplicate sets in {Model.__name__}")

        # Delete duplicates, keeping the one with the lowest ID
        for duplicate in duplicates:
            to_delete = Model.objects.filter(time=duplicate["time"]).exclude(
                id=duplicate["min_id"]
            )
            to_delete.delete()

    # Verify no duplicates remain
    for Model in [Location, Visit]:
        remaining_duplicates = (
            Model.objects.values("time")
            .annotate(count=models.Count("id"))
            .filter(count__gt=1)
        )
        if remaining_duplicates.exists():
            print(
                f"WARNING: {remaining_duplicates.count()} duplicate sets still exist in {Model.__name__}"
            )
            for dup in remaining_duplicates:
                print(f"  Duplicate time: {dup['time']}, Count: {dup['count']}")
        else:
            print(f"No duplicates remain in {Model.__name__}")


def reverse_func(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    atomic = False

    dependencies = [
        ("wayfinder", "0006_alter_visit_duration"),
    ]

    operations = [
        migrations.RunPython(remove_duplicates, reverse_func),
        migrations.AlterField(
            model_name="location",
            name="time",
            field=timescale.db.models.fields.TimescaleDateTimeField(
                interval="1 day", unique=True
            ),
        ),
        migrations.AlterField(
            model_name="visit",
            name="time",
            field=timescale.db.models.fields.TimescaleDateTimeField(
                interval="1 day", unique=True
            ),
        ),
    ]
