/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * API
 * Description placeholder
 * OpenAPI spec version: 1.0.0
 */
import type {
  Login,
  PasswordChange,
  PasswordReset,
  PasswordResetConfirm,
  PatchedUserDetails,
  RestAuthDetail,
  UserDetails,
} from "../api.schemas";
import { customAxiosInstance } from "../../axios";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Check the credentials and return the REST Token
if the credentials are valid and authenticated.
Calls Django Auth login method to register User ID
in Django session framework

Accept the following POST parameters: username, password
Return the REST Framework Token Object's key.
 */
export const authLoginCreate = (
  login: Login,
  options?: SecondParameter<typeof customAxiosInstance>,
) => {
  return customAxiosInstance<void>(
    {
      url: `/auth/login/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: login,
    },
    options,
  );
};
/**
 * Calls Django logout method and delete the Token object
assigned to the current User object.

Accepts/Returns nothing.
 */
export const authLogoutCreate = (
  options?: SecondParameter<typeof customAxiosInstance>,
) => {
  return customAxiosInstance<RestAuthDetail>(
    { url: `/auth/logout/`, method: "POST" },
    options,
  );
};
/**
 * Calls Django Auth SetPasswordForm save method.

Accepts the following POST parameters: new_password1, new_password2
Returns the success/fail message.
 */
export const authPasswordChangeCreate = (
  passwordChange: PasswordChange,
  options?: SecondParameter<typeof customAxiosInstance>,
) => {
  return customAxiosInstance<RestAuthDetail>(
    {
      url: `/auth/password/change/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: passwordChange,
    },
    options,
  );
};
/**
 * Calls Django Auth PasswordResetForm save method.

Accepts the following POST parameters: email
Returns the success/fail message.
 */
export const authPasswordResetCreate = (
  passwordReset: PasswordReset,
  options?: SecondParameter<typeof customAxiosInstance>,
) => {
  return customAxiosInstance<RestAuthDetail>(
    {
      url: `/auth/password/reset/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: passwordReset,
    },
    options,
  );
};
/**
 * Password reset e-mail link is confirmed, therefore
this resets the user's password.

Accepts the following POST parameters: token, uid,
    new_password1, new_password2
Returns the success/fail message.
 */
export const authPasswordResetConfirmCreate = (
  passwordResetConfirm: PasswordResetConfirm,
  options?: SecondParameter<typeof customAxiosInstance>,
) => {
  return customAxiosInstance<RestAuthDetail>(
    {
      url: `/auth/password/reset/confirm/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: passwordResetConfirm,
    },
    options,
  );
};
/**
 * Reads and updates UserModel fields
Accepts GET, PUT, PATCH methods.

Default accepted fields: username, first_name, last_name
Default display fields: pk, username, email, first_name, last_name
Read-only fields: pk, email

Returns UserModel fields.
 */
export const authUserRetrieve = (
  options?: SecondParameter<typeof customAxiosInstance>,
) => {
  return customAxiosInstance<UserDetails>(
    { url: `/auth/user/`, method: "GET" },
    options,
  );
};
/**
 * Reads and updates UserModel fields
Accepts GET, PUT, PATCH methods.

Default accepted fields: username, first_name, last_name
Default display fields: pk, username, email, first_name, last_name
Read-only fields: pk, email

Returns UserModel fields.
 */
export const authUserUpdate = (
  userDetails: NonReadonly<UserDetails>,
  options?: SecondParameter<typeof customAxiosInstance>,
) => {
  return customAxiosInstance<UserDetails>(
    {
      url: `/auth/user/`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: userDetails,
    },
    options,
  );
};
/**
 * Reads and updates UserModel fields
Accepts GET, PUT, PATCH methods.

Default accepted fields: username, first_name, last_name
Default display fields: pk, username, email, first_name, last_name
Read-only fields: pk, email

Returns UserModel fields.
 */
export const authUserPartialUpdate = (
  patchedUserDetails: NonReadonly<PatchedUserDetails>,
  options?: SecondParameter<typeof customAxiosInstance>,
) => {
  return customAxiosInstance<UserDetails>(
    {
      url: `/auth/user/`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchedUserDetails,
    },
    options,
  );
};
export type AuthLoginCreateResult = NonNullable<
  Awaited<ReturnType<typeof authLoginCreate>>
>;
export type AuthLogoutCreateResult = NonNullable<
  Awaited<ReturnType<typeof authLogoutCreate>>
>;
export type AuthPasswordChangeCreateResult = NonNullable<
  Awaited<ReturnType<typeof authPasswordChangeCreate>>
>;
export type AuthPasswordResetCreateResult = NonNullable<
  Awaited<ReturnType<typeof authPasswordResetCreate>>
>;
export type AuthPasswordResetConfirmCreateResult = NonNullable<
  Awaited<ReturnType<typeof authPasswordResetConfirmCreate>>
>;
export type AuthUserRetrieveResult = NonNullable<
  Awaited<ReturnType<typeof authUserRetrieve>>
>;
export type AuthUserUpdateResult = NonNullable<
  Awaited<ReturnType<typeof authUserUpdate>>
>;
export type AuthUserPartialUpdateResult = NonNullable<
  Awaited<ReturnType<typeof authUserPartialUpdate>>
>;
